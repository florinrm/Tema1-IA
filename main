from Cell import Cell
from Driver import Driver
from strategy import Strategies
from algos import DepthFirstSearch, BreathFirstSearch

def parse_input(filename):
    file = open(filename, "r")
    tokens = list(file.readline().split(" "))

    height = int(tokens[0])
    width = int(tokens[1])
    capacity = int(tokens[2])

    tokens = list(file.readline().split(" "))

    carPositionY = int(tokens[0])
    carPositionX = int(tokens[1])

    tokens = list(file.readline().split(" "))
    n = int(tokens[0])

    clients = []
    for _ in range(n):
        tokens = list(file.readline().split(" "))
        startY = int(tokens[0])
        startX = int(tokens[1])
        destinationY = int(tokens[2])
        destinationX = int(tokens[3])
        budget = int(tokens[4])
        clients.append((startX, startY, destinationX, destinationY, budget))

    matrix = []

    file.readline()
    for i in range(height):
        line = file.readline().strip('\n')
        tokens = list(line.split(" "))
        row = []
        for j in range(width):
            cell = Cell(i, j, False, False)

            if j == 0:
                if tokens[j + 1] == ':':
                    cell.moveRight = True
            elif j == width - 1:
                if tokens[j] == ':':
                    cell.moveLeft = True
            else:
                if tokens[j] == ':':
                    cell.moveLeft = True
                if tokens[j + 1] == ':':
                    cell.moveRight = True

            row.append(cell)
        matrix.append(row)
    file.readline()

    driver = Driver(carPositionX, carPositionY, capacity, matrix)
    #print(driver)
    #print(matrix)

    #print(driver.succesors())

    return (clients, driver)

def main():
    (clients, driver) = parse_input("test1.in")
    #print(driver)
    driver.destinationX = 3
    driver.destinationY = 3

    result = DepthFirstSearch.DepthFirstSearch(driver)
    if result != False:
        print(result)
    else:
        print('failed')

    result = BreathFirstSearch.BreathFirstSearch(driver)
    if result != False:
        print(result)
    else:
        print('failed')


if __name__ == '__main__':
    main()